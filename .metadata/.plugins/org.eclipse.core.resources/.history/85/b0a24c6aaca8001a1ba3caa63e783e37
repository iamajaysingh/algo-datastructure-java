package linklist;

public class LinkList<T extends Comparable<T>> implements List<T>{
	
	private Node<T> root;
	private int sizeOfList;

	@Override
	public void insert(T data) {
		// TODO Auto-generated method stub
		++this.sizeOfList;
		
		if(root==null) {
			this.root = new Node<>(data);
		}
		else {
			
			atTheBegining(data);
		}
		
		
	}

	private void atTheBegining(T data) {
		// TODO Auto-generated method stub
		Node<T> newnode = new Node<>(data);
	    newnode.setNextNode(root);
		this.root=newnode;
	}
	
	private void atTheEnd(T data, Node<T> node) {
		if(node.getNextNode() != null) {			
			atTheEnd(data, node.getNextNode());
		}else {	
			Node<T> newnode = new Node<>(data);
			node.setNextNode(newnode);
		}
	}

	@Override
	public void removed(T data) {
		// TODO Auto-generated method stub
		if(root.getData().compareTo(data)==0) {
			-- this.sizeOfList;
			 this.root = root.getNextNode(); 
		}else {
			removed(data, root, root.getNextNode());
		}
		
	}

	private void removed(T data, Node<T> previousNode, Node<T> actualNode) {
		// TODO Auto-generated method stub
		if(actualNode.getData().compareTo(data)==0) {
			-- this.sizeOfList;
			previousNode.setNextNode(actualNode.getNextNode());
			actualNode=null;
			return;
			
	}
		previousNode = actualNode;
		actualNode= actualNode.getNextNode();
		
	}

	@Override
	public void traversalList() {
		// TODO Auto-generated method stub
		
		if(this.root==null) return;
		Node<T> actualNode = this.root;
		while(actualNode != null) {
			
			System.out.println(actualNode+"->");
			actualNode = actualNode.getNextNode();
			
		}
		
		
		
	}

	@Override
	public int size() {
		// TODO Auto-generated method stub
		
		return this.sizeOfList;
	}

	@Override
	public void MiddelNode() {
		int mid = (1+(this.sizeOfList-1)/2);
		         
		int flag= 1;
		Node<T> midddleNode=null;
		
		 while(flag < mid ) {
              this.root = this.root.getNextNode();
			 flag++;
		 }
		 
		 System.out.println("middle node "+this.root);
		
		
		// TODO Auto-generated method stub
		
		
	}
	
	@Override
	public void MiddelNodeViaTwoPointer() {
		
		int mid = (1+(this.sizeOfList-1)/2);
		         
		int flag= 1;
		Node<T> midddleNode=null;
		
		 while(flag < mid ) {
              this.root = this.root.getNextNode();
			 flag++;
		 }
		 
		 System.out.println("middle node "+this.root);
		
		
		// TODO Auto-generated method stub
		
		
	}
	
	

	

}
